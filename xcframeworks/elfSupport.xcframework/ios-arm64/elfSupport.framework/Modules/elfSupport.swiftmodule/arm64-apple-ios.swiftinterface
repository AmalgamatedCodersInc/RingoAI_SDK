// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name elfSupport
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import CommonCrypto
import Foundation
import elfSupport.Private
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import elfSupport
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class ProcessingViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  @objc public static func appColor() -> UIKit.UIColor
  @objc public static func appWhiteColor() -> UIKit.UIColor
  @objc public static func appBlackColor() -> UIKit.UIColor
  @objc public static func appBackgroundColor() -> UIKit.UIColor
  @objc public static func appDisabledColor() -> UIKit.UIColor
  @objc public static func appVideoBGColor() -> UIKit.UIColor
  @objc public static func appWarningColor() -> UIKit.UIColor
  convenience public init(hex: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  convenience public init(hex: Swift.UInt32, alpha: CoreFoundation.CGFloat = 1)
  @objc dynamic public var image: UIKit.UIImage {
    @objc get
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public func style_rounded_white(fit: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func style_rounded_black(fit: Swift.Bool = false)
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public static func xfwcontroller() -> Self?
}
extension Swift.String {
  public subscript(value: Foundation.NSRange) -> Swift.Substring {
    get
  }
}
extension Swift.String {
  public subscript(value: Swift.CountableClosedRange<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.CountableRange<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeUpTo<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeThrough<Swift.Int>) -> Swift.Substring {
    get
  }
  public subscript(value: Swift.PartialRangeFrom<Swift.Int>) -> Swift.Substring {
    get
  }
}
extension Foundation.NSMutableAttributedString {
  public var font: UIKit.UIFont? {
    get
    set
  }
  public var color: UIKit.UIColor? {
    get
    set
  }
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func localize()
}
extension UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func localize()
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func localize()
}
